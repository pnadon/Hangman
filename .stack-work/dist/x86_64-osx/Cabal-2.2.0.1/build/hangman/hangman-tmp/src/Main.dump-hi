
==================== FINAL INTERFACE ====================
2018-12-23 05:07:52.184856 UTC

interface main:Main 8044
  interface hash: dd60fca1b97881235af646f7250b29dd
  ABI hash: 0aa09e7e000349d080b73b803459eaa6
  export-list hash: 418ae220f52f680ad6340360e6b90948
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f4dab8bc5f0dfa686ea02a660f4bdb3b
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allWords
  Main.alreadyGuessed
  Main.charInWord
  Main.fillInCharacter
  Main.freshPuzzle
  Main.gameOver
  Main.gameWin
  Main.gameWords
  Main.handleGuess
  Main.main
  Main.maxWordLength
  Main.minWordLength
  Main.randomWord
  Main.randomWord'
  Main.renderPuzzleChar
  Main.runGame
  Main.Puzzle{Main.Puzzle}
  Main.WordList
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0* deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 random-1.1* time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:System.IO e02b6055b5362a3eac04f83991602a53
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  random-1.1:System.Random eb48a79589c28c60ca3da23b8b25a895
bcfb4cbde90986b160d511cd7eb3df80
  $fShowPuzzle :: GHC.Show.Show Main.Puzzle
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Puzzle
                  Main.$fShowPuzzle_$cshowsPrec
                  Main.$fShowPuzzle_$cshow
                  Main.$fShowPuzzle_$cshowList -}
bcfb4cbde90986b160d511cd7eb3df80
  $fShowPuzzle1 :: Main.Puzzle -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U,U)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.Puzzle) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Main.$fShowPuzzle_$cshow x))
                   s) -}
1eb79a4c69fd077b64d53c8b10d4cb71
  $fShowPuzzle2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
682990eb0b1f84648546000739a60940
  $fShowPuzzle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" Guessed so far: "#) -}
bcfb4cbde90986b160d511cd7eb3df80
  $fShowPuzzle_$cshow :: Main.Puzzle -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Puzzle) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$w$cshow ww2 ww3 }) -}
bcfb4cbde90986b160d511cd7eb3df80
  $fShowPuzzle_$cshowList :: [Main.Puzzle] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Puzzle]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Puzzle Main.$fShowPuzzle1 ls s) -}
bcfb4cbde90986b160d511cd7eb3df80
  $fShowPuzzle_$cshowsPrec ::
    GHC.Types.Int -> Main.Puzzle -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LSL),1*U(A,1*U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Main.Puzzle)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Main.$fShowPuzzle_$cshow x))
                   s) -}
d2a1d65673089a0125dbfa6debf3e162
  $tc'Puzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1873292189318166999##
                   791087988565883416##
                   Main.$trModule
                   Main.$tc'Puzzle2
                   0#
                   Main.$tc'Puzzle1) -}
d093121dd670eab1ca9b1b06d75d8b01
  $tc'Puzzle1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d9b1498d5933e26ee3d9e9be172c3590
  $tc'Puzzle2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Puzzle3) -}
ccbb1a941a4a1338e58cfa4d6ed22d08
  $tc'Puzzle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Puzzle"#) -}
f31663502e458a0bc33ecbc7dcb1ea36
  $tcPuzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12504372730337297243##
                   8030320636282516161##
                   Main.$trModule
                   Main.$tcPuzzle1
                   0#
                   GHC.Types.krep$*) -}
db6e5305d375d6004bdffcb5476d7958
  $tcPuzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcPuzzle2) -}
3a89c5d17146444839a59b635f302ab7
  $tcPuzzle2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Puzzle"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
c03216f6a33c6627742492549cb519f0
  $w$cshow ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww1 :: [GHC.Types.Char]) ->
                 case GHC.Base.map
                        @ (GHC.Base.Maybe GHC.Types.Char)
                        @ GHC.Types.Char
                        Main.renderPuzzleChar
                        ww of wild {
                   [] -> GHC.CString.unpackAppendCString# Main.$fShowPuzzle3 ww1
                   : x xs
                   -> GHC.Base.++_$s++
                        @ GHC.Types.Char
                        (GHC.CString.unpackAppendCString# Main.$fShowPuzzle3 ww1)
                        x
                        (Data.OldList.prependToAll
                           @ GHC.Types.Char
                           Main.$fShowPuzzle2
                           xs) }) -}
0bffbc4c88c9039cff3e490f872ff172
  $wfillInCharacter ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Types.Char
    -> (# GHC.Base.String, [GHC.Base.Maybe GHC.Types.Char],
          [GHC.Types.Char] #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,1*U><L,U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww2 :: [GHC.Types.Char])
                   (w :: GHC.Types.Char) ->
                 (# ww,
                    letrec {
                      go2 :: [GHC.Types.Char]
                             -> [GHC.Base.Maybe GHC.Types.Char]
                             -> [GHC.Base.Maybe GHC.Types.Char]
                        {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                      = \ (ds :: [GHC.Types.Char])
                          (ds1 :: [GHC.Base.Maybe GHC.Types.Char]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ (GHC.Base.Maybe GHC.Types.Char)
                          : ipv ipv1
                          -> case ds1 of wild1 {
                               [] -> GHC.Types.[] @ (GHC.Base.Maybe GHC.Types.Char)
                               : ipv2 ipv3
                               -> GHC.Types.:
                                    @ (GHC.Base.Maybe GHC.Types.Char)
                                    (case ipv of wild2 { GHC.Types.C# x ->
                                     case w of wild3 { GHC.Types.C# y ->
                                     case GHC.Prim.eqChar# x y of lwild {
                                       DEFAULT -> ipv2
                                       1# -> GHC.Base.Just @ GHC.Types.Char wild2 } } })
                                    (go2 ipv1 ipv3) } }
                    } in
                    go2 ww ww1,
                    GHC.Types.: @ GHC.Types.Char w ww2 #)) -}
6ae1563d2cc015df0d5c86806dc27094
  $wgameOver ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><S,1*U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww2 :: [GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char ww2 0# of ww3 { DEFAULT ->
                 case Main.$wgo ww1 0# of ww4 { DEFAULT ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            Main.gameOver3
                            GHC.Types.True
                            w of ds1 { (#,#) ipv ipv1 ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            (GHC.CString.unpackAppendCString# Main.gameOver2 ww)
                            GHC.Types.True
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     System.Exit.exitSuccess1 @ () ipv2 } }
                 } in
                 case GHC.Prim.># (GHC.Prim.-# ww3 ww4) 7# of lwild {
                   DEFAULT
                   -> case GHC.List.$wlenAcc
                             @ GHC.Types.Char
                             ww
                             0# of ww5 { DEFAULT ->
                      case GHC.Prim.>=# ww3 ww5 of lwild1 {
                        DEFAULT -> (# w, GHC.Tuple.() #) 1# -> $j } }
                   1# -> $j } } }) -}
4c4c51134b6d6b76f753bae50352cf3b
  $wgameWin ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   exit :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = (# w, GHC.Tuple.() #)
                 } in
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            Main.gameWin2
                            GHC.Types.True
                            w of ds1 { (#,#) ipv ipv1 ->
                     System.Exit.exitSuccess1 @ () ipv }
                 } in
                 letrec {
                   go :: [GHC.Base.Maybe GHC.Types.Char]
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Base.Maybe GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> $j
                       : y ys
                       -> case y of wild1 {
                            GHC.Base.Nothing -> exit GHC.Base.Just ipv -> go ys } }
                 } in
                 go ww) -}
fa1356fcca72b4c1a84e02b5129f2a4d
  $wgo ::
    [GHC.Base.Maybe GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0] -}
f85562f9540e2a8c873896829c1488e8
  $wrunGame ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><S,U><S,U><S,U>, Inline: [0] -}
95ffe06eddd7fb7e9eb59c579b7a08ca
  $wxs :: GHC.Prim.Int# -> [GHC.Base.Maybe GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [0] -}
bcfb4cbde90986b160d511cd7eb3df80
  data Puzzle
    = Puzzle GHC.Base.String
             [GHC.Base.Maybe GHC.Types.Char]
             [GHC.Types.Char]
bebf37640b67bf35d63fd2c6a1d568f7
  type WordList = [GHC.Base.String]
4b50a6ac53c1f7cb2f008957e2eccf70
  allWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.allWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
74eb58daea505dddb42e52f9374ebd7a
  allWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, Data.OldList.lines ipv3 #) } }) -}
a70cef1a31f1e7aba13b03cd32752818
  allWords2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.allWords3) -}
58ae9e0d864ef61efbd76533a9ad195e
  allWords3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("data/dict.txt"#) -}
0f268683092228c1b3bb5ada4c0c57fb
  alreadyGuessed :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (char :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle ds1 ds2 guessed ->
                 GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   char
                   guessed }) -}
b259ef02179e23eb23ab0569285f521d
  charInWord :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (char :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle word ds1 ds2 ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar char word }) -}
51e096ddc125c6c8b74307f0144f89e5
  fillInCharacter :: Main.Puzzle -> GHC.Types.Char -> Main.Puzzle
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,1*U,U)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Types.Char) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 case Main.$wfillInCharacter
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Main.Puzzle ww5 ww6 ww7 } }) -}
58f6f49792d1a38f7c2a04023f6fa5e8
  freshPuzzle :: GHC.Base.String -> Main.Puzzle
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 Main.Puzzle
                   w
                   (case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                    case GHC.Prim.<# 0# ww2 of lwild {
                      DEFAULT -> GHC.Types.[] @ (GHC.Base.Maybe GHC.Types.Char)
                      1# -> Main.$wxs ww2 } })
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2bfa0e215a1a7db176ec163d0ec06b38
  gameOver :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSS),1*U(U,1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameOver1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f24dff7d0e76ad3859072f66b643cac4
  gameOver1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSS),1*U(U,1*U,1*U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameOver ww1 ww2 ww3 w1 }) -}
8103aea40525bc36cedd09ff2478bf1d
  gameOver2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The word was: "#) -}
f14d7b9d05f2963c7b6fd3e8ed923b82
  gameOver3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.gameOver4) -}
901835c38d62e679f8046f06d0bfa942
  gameOver4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You Lose!"#) -}
de2bf78f502f2fb8d378bfbd35a75722
  gameWin :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWin1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8e472449ec4b9077917afb51d1bd837d
  gameWin1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameWin ww2 w1 }) -}
ea5f1fd9567f04155ba99ac55c790a1b
  gameWin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.gameWin3) -}
7fb334eeb9461271fd8dcb18752ffc84
  gameWin3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You win!"#) -}
60ef9300a25e8ca92dbcda4fbbe0fedf
  gameWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
333fbf30c1e3800a71ba4793ed0e6639
  gameWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GHC.List.filter
                      @ [GHC.Types.Char]
                      Main.gameWords2
                      (Data.OldList.lines ipv3) #) } }) -}
835f9b44fda1f2f57c0014cfd689e71c
  gameWords2 :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.>=# ww2 5# of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 9#) } }) -}
23ebc3962b43be50210a1e042210a432
  handleGuess ::
    Main.Puzzle -> GHC.Types.Char -> GHC.Types.IO Main.Puzzle
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleGuess1
                  `cast`
                (<Main.Puzzle>_R
                 ->_R <GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Puzzle>_R)) -}
9f4dd2e8e1fb8dc919eb37077b180754
  handleGuess1 ::
    Main.Puzzle
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Puzzle #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: (\ (puzzle :: Main.Puzzle)
                   (guess :: GHC.Types.Char)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.handleGuess8
                           (GHC.Types.:
                              @ GHC.Types.Char
                              guess
                              (GHC.Types.[] @ GHC.Types.Char)))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case puzzle of wild { Main.Puzzle ds ds2 guessed ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        guess
                        guessed of wild1 {
                   GHC.Types.False
                   -> case GHC.List.elem
                             @ GHC.Types.Char
                             GHC.Classes.$fEqChar
                             guess
                             ds of wild2 {
                        GHC.Types.False
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleGuess6
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              case Main.$wfillInCharacter
                                     ds
                                     ds2
                                     guessed
                                     guess of ww { (#,,#) ww1 ww2 ww3 ->
                              Main.Puzzle ww1 ww2 ww3 } #) }
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleGuess4
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              case Main.$wfillInCharacter
                                     ds
                                     ds2
                                     guessed
                                     guess of ww { (#,,#) ww1 ww2 ww3 ->
                              Main.Puzzle ww1 ww2 ww3 } #) } }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.handleGuess2
                             GHC.Types.True
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      (# ipv2, wild #) } } } }) -}
cfc8e90e287fbd94f148555e5648c59b
  handleGuess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.handleGuess3) -}
ee0d1f33d63d127c01bff07f7750b579
  handleGuess3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("You already guessed that character, pick  something else!"#) -}
c9ba65c94004afc527ff7bfe0ec5584c
  handleGuess4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.handleGuess5) -}
d05c570bdcba6a106d512098e16467cf
  handleGuess5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("This character was in the word, filling in the word accordingly"#) -}
f8f48216526798efc285abc9d27b79a9
  handleGuess6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.handleGuess7) -}
f03915b80740193decfdd50329c501e6
  handleGuess7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("This character wasn't in the word, try again."#) -}
1fc6081417102a9dc6d7b06eb14d87f6
  handleGuess8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Your guess was: "#) -}
5d274d055f464025595ab45d21ee04c4
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
6562036a81e3af2d8a753b37a3fff13a
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   ipv4 :: Main.WordList
                   = GHC.List.filter
                       @ [GHC.Types.Char]
                       Main.gameWords2
                       (Data.OldList.lines ipv3)
                 } in
                 case System.Random.$fRandomInt3
                        (Main.main2,
                         case GHC.List.$wlenAcc
                                @ [GHC.Types.Char]
                                ipv4
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                 let {
                   w :: GHC.Base.String
                   = case ipv6 of ww { GHC.Types.I# ww1 ->
                     GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       (GHC.List.$w!! @ GHC.Base.String ipv4 ww1) }
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.<# 0# ww2 of lwild {
                   DEFAULT
                   -> Main.$wrunGame
                        w
                        (GHC.Types.[] @ (GHC.Base.Maybe GHC.Types.Char))
                        (GHC.Types.[] @ GHC.Types.Char)
                        ipv5
                   1#
                   -> Main.$wrunGame
                        w
                        (Main.$wxs ww2)
                        (GHC.Types.[] @ GHC.Types.Char)
                        ipv5 } } } } }) -}
183184eb38285c7bd39e3c385cedabd5
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c8e22e902dd7582a8d575031d13ab883
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
4fceacf76d0f25085e7d245cf3a41c5a
  maxWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
b0db760dbf91614cf0e5d73ca129a7d1
  minWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
ab29079401ca454832b3df043793c7e6
  randomWord :: Main.WordList -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord1
                  `cast`
                (<Main.WordList>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
f2cd3906643cb4281895cfd0561716aa
  randomWord' :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord'1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
24425358ebfc2540046ad049dc0f5b9c
  randomWord'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Main.randomWord1
                   (GHC.List.filter
                      @ [GHC.Types.Char]
                      Main.gameWords2
                      (Data.OldList.lines ipv3))
                   ipv2 } }) -}
340abec9e72b05c422ffc948ef2f6c7e
  randomWord1 ::
    Main.WordList
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (wl :: Main.WordList)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.$fRandomInt3
                        (Main.main2,
                         case GHC.List.$wlenAcc @ [GHC.Types.Char] wl 0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.List.!! @ GHC.Base.String wl ipv1 #) }) -}
6d9c2d970e908120a720bdc984df9e06
  renderPuzzleChar :: GHC.Base.Maybe GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Char) ->
                 case ds of wild {
                   GHC.Base.Nothing -> Main.renderPuzzleChar1
                   GHC.Base.Just char -> char }) -}
82b402978805b229abf1e01b5a7db1d3
  renderPuzzleChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_'#) -}
ae61bc3557b737d1ccc73a97eee4edce
  runGame :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSS),1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runGame1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4270c3b3b57edf8b6ef876b39744afc2
  runGame1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSS),1*U(U,U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wrunGame ww1 ww2 ww3 w1 }) -}
instance [safe] GHC.Show.Show [Main.Puzzle] = Main.$fShowPuzzle
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

